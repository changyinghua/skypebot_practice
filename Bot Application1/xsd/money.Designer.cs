// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>ConsoleApp2</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net20</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ConsoleApp22 {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute("mol.gov.tw", Namespace = "", IsNullable = false)]
    public partial class molgovtw2 {

        #region Private fields
        private molgovtwFIELDS _fIELDS;

        private List<molgovtwDATA> _dATA;

        private static XmlSerializer serializer;
        #endregion

        public molgovtw2() {
            this._dATA = new List<molgovtwDATA>();
            this._fIELDS = new molgovtwFIELDS();
        }

        public molgovtwFIELDS FIELDS {
            get {
                return this._fIELDS;
            }
            set {
                this._fIELDS = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("DATA")]
        public List<molgovtwDATA> DATA {
            get {
                return this._dATA;
            }
            set {
                this._dATA = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(molgovtw2));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current molgovtw object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an molgovtw object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output molgovtw object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out molgovtw2 obj, out System.Exception exception) {
            exception = null;
            obj = default(molgovtw2);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out molgovtw2 obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static molgovtw2 Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((molgovtw2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static molgovtw2 Deserialize(System.IO.Stream s) {
            return ((molgovtw2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current molgovtw object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an molgovtw object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output molgovtw object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out molgovtw2 obj, out System.Exception exception) {
            exception = null;
            obj = default(molgovtw2);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out molgovtw2 obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static molgovtw2 LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class molgovtwFIELDS {

        #region Private fields
        private string _colum_1;

        private string _colum_2;

        private string _colum_3;

        private string _colum_4;

        private string _colum_5;

        private string _colum_6;

        private static XmlSerializer serializer;
        #endregion

        public string colum_1 {
            get {
                return this._colum_1;
            }
            set {
                this._colum_1 = value;
            }
        }

        public string colum_2 {
            get {
                return this._colum_2;
            }
            set {
                this._colum_2 = value;
            }
        }

        public string colum_3 {
            get {
                return this._colum_3;
            }
            set {
                this._colum_3 = value;
            }
        }

        public string colum_4 {
            get {
                return this._colum_4;
            }
            set {
                this._colum_4 = value;
            }
        }

        public string colum_5 {
            get {
                return this._colum_5;
            }
            set {
                this._colum_5 = value;
            }
        }

        public string colum_6 {
            get {
                return this._colum_6;
            }
            set {
                this._colum_6 = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(molgovtwFIELDS));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current molgovtwFIELDS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an molgovtwFIELDS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output molgovtwFIELDS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out molgovtwFIELDS obj, out System.Exception exception) {
            exception = null;
            obj = default(molgovtwFIELDS);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out molgovtwFIELDS obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static molgovtwFIELDS Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((molgovtwFIELDS)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static molgovtwFIELDS Deserialize(System.IO.Stream s) {
            return ((molgovtwFIELDS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current molgovtwFIELDS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an molgovtwFIELDS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output molgovtwFIELDS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out molgovtwFIELDS obj, out System.Exception exception) {
            exception = null;
            obj = default(molgovtwFIELDS);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out molgovtwFIELDS obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static molgovtwFIELDS LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class molgovtwDATA {

        #region Private fields
        private sbyte _colum_1;

        private string _colum_2;

        private string _colum_3;

        private int _colum_4;

        private short _colum_5;

        private short _colum_6;

        private static XmlSerializer serializer;
        #endregion

        public sbyte colum_1 {
            get {
                return this._colum_1;
            }
            set {
                this._colum_1 = value;
            }
        }

        public string colum_2 {
            get {
                return this._colum_2;
            }
            set {
                this._colum_2 = value;
            }
        }

        public string colum_3 {
            get {
                return this._colum_3;
            }
            set {
                this._colum_3 = value;
            }
        }

        public int colum_4 {
            get {
                return this._colum_4;
            }
            set {
                this._colum_4 = value;
            }
        }

        public short colum_5 {
            get {
                return this._colum_5;
            }
            set {
                this._colum_5 = value;
            }
        }

        public short colum_6 {
            get {
                return this._colum_6;
            }
            set {
                this._colum_6 = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(molgovtwDATA));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current molgovtwDATA object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an molgovtwDATA object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output molgovtwDATA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out molgovtwDATA obj, out System.Exception exception) {
            exception = null;
            obj = default(molgovtwDATA);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out molgovtwDATA obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static molgovtwDATA Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((molgovtwDATA)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static molgovtwDATA Deserialize(System.IO.Stream s) {
            return ((molgovtwDATA)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current molgovtwDATA object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an molgovtwDATA object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output molgovtwDATA object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out molgovtwDATA obj, out System.Exception exception) {
            exception = null;
            obj = default(molgovtwDATA);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out molgovtwDATA obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static molgovtwDATA LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
