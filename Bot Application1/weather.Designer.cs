// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.4.0.7
//    <NameSpace>ConsoleApp2</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net40</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><IndentChar>Indent2Space</IndentChar><NewLineAttr>False</NewLineAttr><OmitXML>False</OmitXML><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>False</sspNullable><sspString>False</sspString><sspCollection>False</sspCollection><sspComplexType>False</sspComplexType><sspSimpleType>False</sspSimpleType><sspEnumType>False</sspEnumType><XmlSerializerEvent>False</XmlSerializerEvent><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace ConsoleApp2 {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:cwb:gov:tw:cwbcommon:0.1", IsNullable = false)]
    public partial class cwbopendata {

        #region Private fields
        private string _identifier;

        private string _sender;

        private System.DateTime _sent;

        private string _status;

        private string _msgType;

        private string _source;

        private string _dataid;

        private string _scope;

        private cwbopendataDataset _dataset;

        private static XmlSerializer serializer;
        #endregion

        public cwbopendata() {
            this._dataset = new cwbopendataDataset();
        }

        public string identifier {
            get {
                return this._identifier;
            }
            set {
                this._identifier = value;
            }
        }

        public string sender {
            get {
                return this._sender;
            }
            set {
                this._sender = value;
            }
        }

        public System.DateTime sent {
            get {
                return this._sent;
            }
            set {
                this._sent = value;
            }
        }

        public string status {
            get {
                return this._status;
            }
            set {
                this._status = value;
            }
        }

        public string msgType {
            get {
                return this._msgType;
            }
            set {
                this._msgType = value;
            }
        }

        public string source {
            get {
                return this._source;
            }
            set {
                this._source = value;
            }
        }

        public string dataid {
            get {
                return this._dataid;
            }
            set {
                this._dataid = value;
            }
        }

        public string scope {
            get {
                return this._scope;
            }
            set {
                this._scope = value;
            }
        }

        public cwbopendataDataset dataset {
            get {
                return this._dataset;
            }
            set {
                this._dataset = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendata));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendata object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendata object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendata obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendata);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendata obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendata Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendata)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendata Deserialize(System.IO.Stream s) {
            return ((cwbopendata)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendata object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendata object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendata obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendata);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendata obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendata LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    public partial class cwbopendataDataset {

        #region Private fields
        private cwbopendataDatasetDatasetInfo _datasetInfo;

        private List<cwbopendataDatasetLocation> _location;

        private static XmlSerializer serializer;
        #endregion

        public cwbopendataDataset() {
            this._location = new List<cwbopendataDatasetLocation>();
            this._datasetInfo = new cwbopendataDatasetDatasetInfo();
        }

        public cwbopendataDatasetDatasetInfo datasetInfo {
            get {
                return this._datasetInfo;
            }
            set {
                this._datasetInfo = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("location")]
        public List<cwbopendataDatasetLocation> location {
            get {
                return this._location;
            }
            set {
                this._location = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendataDataset));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendataDataset object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendataDataset object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendataDataset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendataDataset obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDataset);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendataDataset obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendataDataset Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendataDataset)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendataDataset Deserialize(System.IO.Stream s) {
            return ((cwbopendataDataset)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendataDataset object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendataDataset object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendataDataset object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendataDataset obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDataset);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendataDataset obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendataDataset LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    public partial class cwbopendataDatasetDatasetInfo {

        #region Private fields
        private string _datasetDescription;

        private System.DateTime _issueTime;

        private System.DateTime _update;

        private static XmlSerializer serializer;
        #endregion

        public string datasetDescription {
            get {
                return this._datasetDescription;
            }
            set {
                this._datasetDescription = value;
            }
        }

        public System.DateTime issueTime {
            get {
                return this._issueTime;
            }
            set {
                this._issueTime = value;
            }
        }

        public System.DateTime update {
            get {
                return this._update;
            }
            set {
                this._update = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendataDatasetDatasetInfo));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendataDatasetDatasetInfo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendataDatasetDatasetInfo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetDatasetInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendataDatasetDatasetInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetDatasetInfo);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendataDatasetDatasetInfo obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendataDatasetDatasetInfo Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendataDatasetDatasetInfo)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendataDatasetDatasetInfo Deserialize(System.IO.Stream s) {
            return ((cwbopendataDatasetDatasetInfo)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendataDatasetDatasetInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendataDatasetDatasetInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetDatasetInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendataDatasetDatasetInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetDatasetInfo);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendataDatasetDatasetInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendataDatasetDatasetInfo LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    public partial class cwbopendataDatasetLocation {

        #region Private fields
        private string _locationName;

        private List<cwbopendataDatasetLocationWeatherElement> _weatherElement;

        private static XmlSerializer serializer;
        #endregion

        public cwbopendataDatasetLocation() {
            this._weatherElement = new List<cwbopendataDatasetLocationWeatherElement>();
        }

        public string locationName {
            get {
                return this._locationName;
            }
            set {
                this._locationName = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("weatherElement")]
        public List<cwbopendataDatasetLocationWeatherElement> weatherElement {
            get {
                return this._weatherElement;
            }
            set {
                this._weatherElement = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendataDatasetLocation));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendataDatasetLocation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendataDatasetLocation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendataDatasetLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocation);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendataDatasetLocation obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendataDatasetLocation Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendataDatasetLocation)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendataDatasetLocation Deserialize(System.IO.Stream s) {
            return ((cwbopendataDatasetLocation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendataDatasetLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendataDatasetLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocation obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocation);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocation obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendataDatasetLocation LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    public partial class cwbopendataDatasetLocationWeatherElement {

        #region Private fields
        private string _elementName;

        private List<cwbopendataDatasetLocationWeatherElementTime> _time;

        private static XmlSerializer serializer;
        #endregion

        public cwbopendataDatasetLocationWeatherElement() {
            this._time = new List<cwbopendataDatasetLocationWeatherElementTime>();
        }

        public string elementName {
            get {
                return this._elementName;
            }
            set {
                this._elementName = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("time")]
        public List<cwbopendataDatasetLocationWeatherElementTime> time {
            get {
                return this._time;
            }
            set {
                this._time = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendataDatasetLocationWeatherElement));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendataDatasetLocationWeatherElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendataDatasetLocationWeatherElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocationWeatherElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendataDatasetLocationWeatherElement obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocationWeatherElement);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendataDatasetLocationWeatherElement obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendataDatasetLocationWeatherElement Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendataDatasetLocationWeatherElement)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendataDatasetLocationWeatherElement Deserialize(System.IO.Stream s) {
            return ((cwbopendataDatasetLocationWeatherElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendataDatasetLocationWeatherElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendataDatasetLocationWeatherElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocationWeatherElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocationWeatherElement obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocationWeatherElement);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocationWeatherElement obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendataDatasetLocationWeatherElement LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    public partial class cwbopendataDatasetLocationWeatherElementTime {

        #region Private fields
        private System.DateTime _startTime;

        private System.DateTime _endTime;

        private cwbopendataDatasetLocationWeatherElementTimeParameter _parameter;

        private static XmlSerializer serializer;
        #endregion

        public cwbopendataDatasetLocationWeatherElementTime() {
            this._parameter = new cwbopendataDatasetLocationWeatherElementTimeParameter();
        }

        public System.DateTime startTime {
            get {
                return this._startTime;
            }
            set {
                this._startTime = value;
            }
        }

        public System.DateTime endTime {
            get {
                return this._endTime;
            }
            set {
                this._endTime = value;
            }
        }

        public cwbopendataDatasetLocationWeatherElementTimeParameter parameter {
            get {
                return this._parameter;
            }
            set {
                this._parameter = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendataDatasetLocationWeatherElementTime));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendataDatasetLocationWeatherElementTime object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendataDatasetLocationWeatherElementTime object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocationWeatherElementTime object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendataDatasetLocationWeatherElementTime obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocationWeatherElementTime);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendataDatasetLocationWeatherElementTime obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendataDatasetLocationWeatherElementTime Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendataDatasetLocationWeatherElementTime)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendataDatasetLocationWeatherElementTime Deserialize(System.IO.Stream s) {
            return ((cwbopendataDatasetLocationWeatherElementTime)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendataDatasetLocationWeatherElementTime object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendataDatasetLocationWeatherElementTime object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocationWeatherElementTime object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocationWeatherElementTime obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocationWeatherElementTime);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocationWeatherElementTime obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendataDatasetLocationWeatherElementTime LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2053.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:cwb:gov:tw:cwbcommon:0.1")]
    public partial class cwbopendataDatasetLocationWeatherElementTimeParameter {

        #region Private fields
        private string _parameterName;

        private sbyte _parameterValue;

        private string _parameterUnit;

        private static XmlSerializer serializer;
        #endregion

        public string parameterName {
            get {
                return this._parameterName;
            }
            set {
                this._parameterName = value;
            }
        }

        public sbyte parameterValue {
            get {
                return this._parameterValue;
            }
            set {
                this._parameterValue = value;
            }
        }

        public string parameterUnit {
            get {
                return this._parameterUnit;
            }
            set {
                this._parameterUnit = value;
            }
        }

        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(cwbopendataDatasetLocationWeatherElementTimeParameter));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current cwbopendataDatasetLocationWeatherElementTimeParameter object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            } finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an cwbopendataDatasetLocationWeatherElementTimeParameter object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocationWeatherElementTimeParameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out cwbopendataDatasetLocationWeatherElementTimeParameter obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocationWeatherElementTimeParameter);
            try {
                obj = Deserialize(input);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out cwbopendataDatasetLocationWeatherElementTimeParameter obj) {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static cwbopendataDatasetLocationWeatherElementTimeParameter Deserialize(string input) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(input);
                return ((cwbopendataDatasetLocationWeatherElementTimeParameter)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            } finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }

        public static cwbopendataDatasetLocationWeatherElementTimeParameter Deserialize(System.IO.Stream s) {
            return ((cwbopendataDatasetLocationWeatherElementTimeParameter)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current cwbopendataDatasetLocationWeatherElementTimeParameter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            } catch (System.Exception e) {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            } finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an cwbopendataDatasetLocationWeatherElementTimeParameter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output cwbopendataDatasetLocationWeatherElementTimeParameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocationWeatherElementTimeParameter obj, out System.Exception exception) {
            exception = null;
            obj = default(cwbopendataDatasetLocationWeatherElementTimeParameter);
            try {
                obj = LoadFromFile(fileName);
                return true;
            } catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out cwbopendataDatasetLocationWeatherElementTimeParameter obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static cwbopendataDatasetLocationWeatherElementTimeParameter LoadFromFile(string fileName) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            } finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
